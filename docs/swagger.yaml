openapi: "3.0.0"
info:
  title: 4-check API
  description:
    The 4-check API exposes all of 4-check's functionality as RESTful
    web service.
  version: 2.0.0
servers:
- url: http://api.4-check.localhost/v2
paths:
  /login/ci:
    post:
      summary: Creates a new branded login.
      operationId: createLogin
      tags:
      - Login
      - Company
      - CorporateIdentity
      requestBody:
        description: id and company.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBrandedLogin'
      responses:
        '201':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandedLoginResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login/ci/{id}:
    get:
      summary: Fetches a corporate identity.
      operationId: viewBrandedLogin
      tags:
      - Login
      - Company
      - CorporateIdentity
      parameters:
      - name: userId
        in: path
        description: ID of branded login.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Corporate Identity Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateIdentityResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /preferences/login/{id}:
    patch:
      summary: Updates a branded login.
      operationId: updateBrandedLogin
      tags:
      - Login
      - Company
      - CorporateIdentity
      security:
      - BearerAuth: []
      requestBody:
        description: login to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBrandedLogin'
      parameters:
      - name: id
        in: path
        description: ID of login to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: branded loign updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a branded login.
      operationId: deleteBrandedLogin
      tags:
      - Login
      - Company
      - CorporateIdentity
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of branded login.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: branded login deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Lists users.
      operationId: indexUser
      tags:
      - Users
      security:
      - BearerAuth: []
      parameters:
      - name: company
        description: Filter by company
        in: query
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new user.
      operationId: createUser
      tags:
      - Users
      requestBody:
        description: User to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      summary: Fetches the currently logged in user.
      operationId: viewMe
      tags:
      - Users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      summary: Fetches a user.
      operationId: viewUser
      tags:
      - Users
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of user to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a user.
      operationId: updateUser
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        description: User to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      parameters:
      - name: userId
        in: path
        description: ID of user to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: User updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a user.
      operationId: deleteUser
      tags:
      - Users
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of user to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: User deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/phones:
    get:
      summary: Lists a user's phones.
      operationId: indexPhone
      tags:
      - Phones
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Phone List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new phone.
      operationId: createPhone
      tags:
      - Phones
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of user to modify.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Phone to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePhone'
      responses:
        '201':
          description: Phone Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/groups:
    get:
      summary: Lists a user's groups.
      operationId: indexUserGroups
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Group List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/grants:
    get:
      summary: Lists a user's access grants.
      operationId: indexUserAccessGrants
      tags:
      - Users
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Access Grant List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/password/token:
    post:
      summary: Creates a lost password token.
      operationId: setResetPasswordToken
      tags:
      - Users
      - ResetPassword
      requestBody:
        description: user to reset password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetResetPasswordToken'
      responses:
        '200':
          description: Everything worked
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/password/reset:
    post:
      summary: Resets password.
      operationId: resetPassword
      tags:
      - Users
      - ResetPassword
      requestBody:
        description: token to reset password to.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Everything worked
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/verify:
    post:
      summary: verifies an email.
      operationId: verifyEmail
      tags:
      - Users
      - VerifyEmail
      requestBody:
        description: token to verify email.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
      responses:
        '200':
          description: Everything worked
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/preferences/notifications/{userId}:
    get:
      summary: Lists a user's notification preferences.
      operationId: indexNotificationPreferences
      tags:
      - Users
      - NotificationPrefernces
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Notification Preferences List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates notification preferences of a user.
      operationId: updateNotificationPreferences
      tags:
      - Users
      - NotificationPreferences
      security:
      - BearerAuth: []
      requestBody:
        description: User to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationPreferences'
      parameters:
      - name: userId
        in: path
        description: ID of user that notification preferences get updated.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: NotificationPreferences updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /phones/{phoneId}:
    get:
      summary: Fetches a phone.
      operationId: viewPhone
      tags:
      - Phones
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      - name: phoneId
        in: path
        description: ID of the phone.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Phone Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a phone.
      operationId: updatePhone
      tags:
      - Phones
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      - name: phoneId
        in: path
        description: ID of the phone.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Phone to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhone'
      responses:
        '204':
          description: Phone updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a phone.
      operationId: deletePhone
      tags:
      - Phones
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      - name: phoneId
        in: path
        description: ID of the phone.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Phone deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies:
    get:
      summary: Lists companies.
      operationId: indexCompany
      tags:
      - Companies
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Company List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}:
    get:
      summary: Fetches a company.
      operationId: viewCompany
      tags:
      - Companies
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Company Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a company.
      operationId: updateCompany
      tags:
      - Companies
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Company to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
      responses:
        '204':
          description: Company updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a company.
      operationId: deleteCompany
      tags:
      - Companies
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Company deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}/users:
    get:
      summary: Lists users of company.
      operationId: indexCompanyUser
      tags:
      - Users
      - Company
      security:
      - BearerAuth: []
      parameters:
      - name: company
        description: Filter by company
        in: query
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}/addresses:
    get:
      summary: Lists a company's addresses.
      operationId: indexAddress
      tags:
      - Addresses
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Address List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new address.
      operationId: createAddress
      tags:
      - Addresses
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Address to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddress'
      responses:
        '201':
          description: Address Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}/reportsettings:
    get:
      summary: Fetches a company's report settings.
      operationId: viewCompanyReportSettings
      tags:
      - Report Settings
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Report Settings Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportSettingsResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a company's report settings.
      operationId: updateComapnyReportSettings
      tags:
      - Report Settings
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Report Settings to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportSettings'
      responses:
        '204':
          description: Report settings updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/preferences/ci:
    post:
      summary: Creates a new corporate identity.
      operationId: createCorporateIdentity
      tags:
      - Companies
      - Corporate Identity
      requestBody:
        description: corporate identity to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorporateIdentity'
      responses:
        '201':
          description: Corporate Identity Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateIdentityResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /companies/{companyId}/subscription:
    get:
      summary: Gets the companies subscription
      operationId: getCompanySubscription
      tags:
      - Companies
      - Subscription
      responses:
        '200':
          description: Corporate Identity Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanySubscriptionResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/preferences/ci/{companyId}:
    get:
      summary: Fetches a corporate identity.
      operationId: viewCorporateIdentity
      tags:
      - Companies
      - Corporate Identity
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of coporate identities company to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Corporate Identity Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateIdentityResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a corporate identity.
      operationId: updateCorporateIdentity
      tags:
      - Companies
      - Corporate Identity
      security:
      - BearerAuth: []
      requestBody:
        description: Corporate Identity to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorporateIdentity'
      parameters:
      - name: companyId
        in: path
        description: ID of corporate identities company to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Corporate Identity updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a corporate identity.
      operationId: deleteCorporateIdentity
      tags:
      - Companies
      - Corporate Identity
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of corporate identities company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Corporate Identity deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addresses/{addressId}:
    get:
      summary: Fetches an address.
      operationId: viewAddress
      tags:
      - Addresses
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: addressId
        in: path
        description: ID of the address.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Address Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates an address.
      operationId: updateAddress
      tags:
      - Addresses
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: addressId
        in: path
        description: ID of the address.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Address to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddress'
      responses:
        '204':
          description: Address updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes an address.
      operationId: deleteAddress
      tags:
      - Addresses
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: addressId
        in: path
        description: ID of the address.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Address deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}/groups:
    get:
      summary: Lists a company's groups.
      operationId: indexGroup
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Group List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new group.
      operationId: createGroup
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Group to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '201':
          description: Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{companyId}/scoringschemes:
    get:
      summary: Lists a company's scoring schemes.
      operationId: indexScoringSchemes
      tags:
      - Companies
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Scoring Scheme List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringSchemeListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new scoring scheme.
      operationId: createScoringScheme
      tags:
      - Companies
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Scoring scheme to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScoringScheme'
      responses:
        '201':
          description: Scoring Scheme Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringSchemeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{groupId}:
    get:
      summary: Fetches a group.
      operationId: viewGroup
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a group.
      operationId: updateGroup
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Group to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
      responses:
        '204':
          description: Group updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a group.
      operationId: deleteGroup
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Group deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{groupId}/members:
    get:
      summary: Lists a group's members.
      operationId: indexGroupMembers
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Add a group member.
      operationId: addGroupMember
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Id of the user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Id'
      responses:
        '204':
          description: Member added
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a group member.
      operationId: deleteGroupMember
      tags:
      - Groups
      security:
      - BearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Id of the user to delete.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Id'
      responses:
        '204':
          description: Member deleted
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{groupId}/grants:
    get:
      summary: Lists a group's access grants.
      operationId: indexGroupAccessGrants
      tags:
      - Groups
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Access Grant List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /subscriptions/{subscriptionId}:
    get:
      summary: Fetches a subscription.
      operationId: viewSubscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      parameters:
      - name: subscriptionId
        in: path
        description: ID of the subscription to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Subscription Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a subscription.
      operationId: updateSubscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      parameters:
      - name: subscriptionId
        in: path
        description: ID of the subscription.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Subscription to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscription'
      responses:
        '204':
          description: Subscription updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reportsettings/{settingsId}:
    get:
      summary: Fetches the report settings.
      operationId: viewReportSettings
      tags:
      - Report Settings
      security:
      - BearerAuth: []
      parameters:
      - name: settingsId
        in: path
        description: ID of the report settings to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Report Settings Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportSettingsResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates  the report settings.
      operationId: updateReportSettings
      tags:
      - Report Settings
      security:
      - BearerAuth: []
      parameters:
      - name: settingsId
        in: path
        description: ID of the report settings.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Report Settings to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportSettings'
      responses:
        '204':
          description: Report settings updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks:
    post:
      summary: Creates a new task.
      operationId: createTask
      tags:
      - Tasks
      requestBody:
        description: Task to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTask'
      responses:
        '201':
          description: Task Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/delete:
    patch:
      summary: Deletes a Task.
      operationId: deleteTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: items
        in: request
        description: array of ID of tasks to delete.
        required: true
        schema:
          type: array
      responses:
        '204':
          description: Task deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/finish:
    patch:
      summary: finishes a set of tasks.
      operationId: finishTasks
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: items
        in: request
        description: array of ID of tasks to finish.
        required: true
        schema:
          type: array
      responses:
        '204':
          description: Tasks finished
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}:
    get:
      summary: Fetches a task.
      operationId: viewTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: taskId
        in: path
        description: ID of task to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Task Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a task.
      operationId: updateTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      requestBody:
        description: Task to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
      parameters:
      - name: taskId
        in: path
        description: ID of task to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Task updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Task.
      operationId: deleteTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: taskId
        in: path
        description: ID of task to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Task deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/company:
    get:
      summary: Lists tasks of company.
      operationId: indexTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        description: selected user
        in: path
        schema:
          type: string
          format: uuid
      - name: state
        description: filter by state
        in: query
        schema:
          type: string
          format: uuid
      - name: type
        description: filter by type
        in: query
        schema:
          type: string
          format: uuid
      - name: priority
        description: filter by priority
        in: query
        schema:
          type: string
          format: uuid
      - name: issuer
        description: filter by issuer
        in: query
        schema:
          type: string
          format: uuid
      - name: assignee
        description: filter by assignee
        in: query
        schema:
          type: string
          format: uuid
      - name: name
        description: filter by task name
        in: query
        schema:
          type: string
      - name: location
        description: filter by location
        in: query
        schema:
          type: string
          format: uuid
      - name: start
        description: start date for filter by time period
        in: query
        schema:
          type: string
          format: date
      - name: end
        description: end date for filter by time period
        in: query
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Task List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/company/{companyId}:
    get:
      summary: Lists tasks of a company for a super admin.
      operationId: indexTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        description: selected user
        in: path
        schema:
          type: string
          format: uuid
      - name: state
        description: filter by state
        in: query
        schema:
          type: string
          format: uuid
      - name: type
        description: filter by type
        in: query
        schema:
          type: string
          format: uuid
      - name: priority
        description: filter by priority
        in: query
        schema:
          type: string
          format: uuid
      - name: issuer
        description: filter by issuer
        in: query
        schema:
          type: string
          format: uuid
      - name: assignee
        description: filter by assignee
        in: query
        schema:
          type: string
          format: uuid
      - name: name
        description: filter by task name
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Task List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/states:
    post:
      summary: Creates a new Task state.
      operationId: createTaskState
      tags:
      - TaskStates
      requestBody:
        description: Task state to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskState'
      responses:
        '201':
          description: Task State Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/states/{taskStateId}:
    get:
      summary: Fetches a Task state.
      operationId: viewTaskState
      tags:
      - TaskStates
      security:
      - BearerAuth: []
      parameters:
      - name: TaskStateId
        in: path
        description: ID of Task state to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task state Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStateResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a Task state.
      operationId: updateTaskState
      tags:
      - TaskStates
      security:
      - BearerAuth: []
      requestBody:
        description: Task state to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskState'
      parameters:
      - name: TaskStateId
        in: path
        description: ID of Task state to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task state updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Task state.
      operationId: deleteTaskState
      tags:
      - TaskStates
      security:
      - BearerAuth: []
      parameters:
      - name: TaskStateId
        in: path
        description: ID of Task state to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task state deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/states/company/{companyId}:
    get:
      summary: Lists Task states of company.
      operationId: indexTaskStates
      tags:
      - TaskStates
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Task state List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStateListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/priorities:
    post:
      summary: Creates a new Task priority.
      operationId: createTaskPriority
      tags:
      - TaskPriority
      requestBody:
        description: Task priority to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskPriority'
      responses:
        '201':
          description: Task priority Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/priorities/{taskPriorityId}:
    get:
      summary: Fetches a Task priority.
      operationId: viewTaskPriority
      tags:
      - TaskPriority
      security:
      - BearerAuth: []
      parameters:
      - name: TaskPriorityId
        in: path
        description: ID of Task priority to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task priority Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a Task priority.
      operationId: updateTaskPriority
      tags:
      - TaskPriority
      security:
      - BearerAuth: []
      requestBody:
        description: Task priority to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskPriority'
      parameters:
      - name: TaskPriorityId
        in: path
        description: ID of Task priority to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task priority updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Task priority.
      operationId: deleteTaskPriority
      tags:
      - TaskPriority
      security:
      - BearerAuth: []
      parameters:
      - name: TaskPriorityId
        in: path
        description: ID of Task priority to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task priority deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/priorities/company/{companyId}:
    get:
      summary: Lists Task priorities of company.
      operationId: indexTaskpriorities
      tags:
      - TaskPriority
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Task priority List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/types:
    post:
      summary: Creates a new Task type.
      operationId: createTaskType
      tags:
      - TaskType
      requestBody:
        description: Task type to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskType'
      responses:
        '201':
          description: Task type Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/types/{taskTypeId}:
    get:
      summary: Fetches a Task type.
      operationId: viewTaskType
      tags:
      - TaskType
      security:
      - BearerAuth: []
      parameters:
      - name: TaskTypeId
        in: path
        description: ID of Task type to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task type Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypeResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a Task type.
      operationId: updateTaskType
      tags:
      - TaskType
      security:
      - BearerAuth: []
      requestBody:
        description: Task type to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskType'
      parameters:
      - name: TaskTypeId
        in: path
        description: ID of Task type to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task type updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Task type.
      operationId: deleteTaskType
      tags:
      - TaskType
      security:
      - BearerAuth: []
      parameters:
      - name: TaskTypeId
        in: path
        description: ID of Task type to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task type deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations:
    post:
      summary: Creates a new location.
      operationId: createLocation
      tags:
      - Locations
      requestBody:
        description: Location to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocation'
      responses:
        '201':
          description: Location Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/delete:
    patch:
      summary: Deletes one or a set of locations
      operationId: deleteSetLocations
      tags:
      - Locations
      security:
      - BearerAuth: []
      parameters:
      - name: items
        in: path
        description: IDs of the locations to delete as array
        required: true
        schema:
          type: array
      responses:
        '204':
          description: Locations deleted
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/{locationId}:
    get:
      summary: Fetches a location.
      operationId: viewLocation
      tags:
      - Locations
      security:
      - BearerAuth: []
      parameters:
      - name: locationId
        in: path
        description: ID of location to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Location Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a location.
      operationId: updateLocation
      tags:
      - Locations
      security:
      - BearerAuth: []
      requestBody:
        description: Location to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocation'
      parameters:
      - name: locationId
        in: path
        description: ID of location to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Location updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Location.
      operationId: deleteLocation
      tags:
      - Locations
      security:
      - BearerAuth: []
      parameters:
      - name: locationId
        in: path
        description: ID of location to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Location deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/company/{companyId}:
    get:
      summary: Lists locations of company.
      operationId: indexLocations
      tags:
      - Locations
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: state
        description: filter by state
        in: query
        schema:
          type: string
          format: uuid
      - name: type
        description: filter by type
        in: query
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      - name: name
        description: fulltext search for column 'name', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: description
        description: fulltext search for column 'description', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: street
        description: fulltext search for column 'street', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: streetNumber
        description: fulltext search for column 'streetNumber', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: city
        description: fulltext search for column 'city', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: postalCode
        description: fulltext search for column 'postalCode', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: province
        description: fulltext search for column 'province', with wildcard '%' before and after term
        in: query
        schema:
          type: string
      - name: selected
        description: the selected parent element which was clicked
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Location List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/types:
    post:
      summary: Creates a new location type.
      operationId: createLocationType
      tags:
      - LocationTypes
      requestBody:
        description: Location type to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationType'
      responses:
        '201':
          description: Location Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationTypeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/types/{locationTypeId}:
    get:
      summary: Fetches a location type.
      operationId: viewLocationType
      tags:
      - LocationTypes
      security:
      - BearerAuth: []
      parameters:
      - name: locationTypeId
        in: path
        description: ID of location type to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Location Type Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationTypeResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a location type.
      operationId: updateLocationType
      tags:
      - LocationTypes
      security:
      - BearerAuth: []
      requestBody:
        description: Location type to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationType'
      parameters:
      - name: locationTypeId
        in: path
        description: ID of location type to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Location type updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a location type.
      operationId: deleteLocationType
      tags:
      - LocationTypes
      security:
      - BearerAuth: []
      parameters:
      - name: locationTypeId
        in: path
        description: ID of location type to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Location type deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/types/company/{companyId}:
    get:
      summary: Lists location types of company.
      operationId: indexLocationTypes
      tags:
      - LocationTypes
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Location Type List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationTypeListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/states:
    post:
      summary: Creates a new location state.
      operationId: createLocationState
      tags:
      - LocationStates
      requestBody:
        description: Location state to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationState'
      responses:
        '201':
          description: Location State Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationStateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/states/{locationStateId}:
    get:
      summary: Fetches a location state.
      operationId: viewLocationState
      tags:
      - LocationStates
      security:
      - BearerAuth: []
      parameters:
      - name: locationStateId
        in: path
        description: ID of location state to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Location state Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationStateResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a location state.
      operationId: updateLocationState
      tags:
      - LocationStates
      security:
      - BearerAuth: []
      requestBody:
        description: Location state to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationState'
      parameters:
      - name: locationStateId
        in: path
        description: ID of location state to update.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Location state updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a location state.
      operationId: deleteLocationState
      tags:
      - LocationStates
      security:
      - BearerAuth: []
      parameters:
      - name: locationStateId
        in: path
        description: ID of location state to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Location state deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/states/company/{companyId}:
    get:
      summary: Lists location states of company.
      operationId: indexLocationStates
      tags:
      - LocationStates
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Location state List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationStateListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories:
    post:
      summary: Creates a new directory.
      operationId: createDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      requestBody:
        description: Directory to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectory'
      responses:
        '201':
          description: Directory Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a set of directories.
      operationId: deleteSetDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      requestBody:
        description: id's of directories to be deleted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoriesDeleteSet
      responses:
        '204':
          description: Directories deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/move:
    patch:
      summary: moves a set of directories or checklists and it's childs.
      operationId: moveDirectory
      tags:
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: Directory or checklist to move.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectories'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{entryId}/move:
    patch:
      summary: moves a directory or a checklist and it's childs.
      operationId: moveDirectory
      tags:
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        in: path
        description: ID of the directory or checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Directory or checklist to move.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectory'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/copy:
    patch:
      summary: copys a set of directories or checklists and it's childs.
      operationId: copyDirectory
      tags:
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: Directory or checklist to copy.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectories'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{entryId}/copy:
    patch:
      summary: copys a directory or a checklist and it's childs.
      operationId: copyDirectory
      tags:
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        in: path
        description: ID of the directory or checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Directory or checklist to copy.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectory'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/archive:
    patch:
      summary: archives a set of directories or checklists and it's childs.
      operationId: archiveDirectory
      tags:
      - Archive
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: Directory or checklist to archive.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveDirectories'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{entryId}/archive:
    patch:
      summary: archives a directory or a checklist and it's childs.
      operationId: archiveDirectory
      tags:
      - Archive
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        in: path
        description: ID of the directory or checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Directory or checklist to archive.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveDirectory'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/restore:
    patch:
      summary: restores a set of directories or checklists and it's childs.
      operationId: restoreDirectory
      tags:
      - Restore
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: Directory or checklist to restore.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveDirectories'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{entryId}/restore:
    patch:
      summary: restores a directory or a checklist and it's childs.
      operationId: restoreDirectory
      tags:
      - Restore
      - Directories
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        in: path
        description: ID of the directory or checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Directory or checklist to restore.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveDirectory'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{directoryId}:
    get:
      summary: Fetches a directory.
      operationId: viewDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Directory Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a directory.
      operationId: updateDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Directory to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectory'
      responses:
        '204':
          description: Directory updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a directory.
      operationId: deleteDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Directory deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{directoryId}/entries:
    get:
      summary: Lists a directory's entries.
      operationId: indexDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Directory Entry List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryEntryListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /directories/{directoryId}/grants:
    get:
      summary: Lists a directory's access grants.
      operationId: indexDirectoryAccessGrants
      tags:
      - Directories
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Access Grant List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new access grant.
      operationId: createDirectoryAccessGrant
      tags:
      - Directories
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: directoryId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Access grant to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessGrant'
      responses:
        '201':
          description: Access Grant Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /archives:
    post:
      summary: Creates a new archive.
      operationId: createDirectory
      tags:
      - Archives
      security:
      - BearerAuth: []
      requestBody:
        description: Archive to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectory'
      responses:
        '201':
          description: Directory Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a set of archives.
      operationId: deleteSetDirectory
      tags:
      - Directories
      security:
      - BearerAuth: []
      requestBody:
        description: id's of directories to be deleted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoriesDeleteSet
      responses:
        '204':
          description: Directories deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /archives/{archiveId}:
    get:
      summary: Fetches a arhives.
      operationId: viewDirectory
      tags:
      - Archives
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the directory.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Archive Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a archive.
      operationId: updateArchive
      tags:
      - Archives
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the archive.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: archive to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectory'
      responses:
        '204':
          description: archive updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a archive.
      operationId: deleteArchive
      tags:
      - Archives
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the archive.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: archive deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /archives/{archiveId}/entries:
    get:
      summary: Lists a archive's entries.
      operationId: indexDirectory
      tags:
      - Archives
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the archive.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Directory Entry List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryEntryListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /archives/{archiveId}/grants:
    get:
      summary: Lists a archives access grants.
      operationId: indexArchiveAccessGrants
      tags:
      - Archives
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the archive.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Access Grant List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new access grant.
      operationId: createDirectoryAccessGrant
      tags:
      - Archives
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: archiveId
        in: path
        description: ID of the company.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Access grant to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessGrant'
      responses:
        '201':
          description: Access Grant Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists:
    post:
      summary: Creates a new checklist.
      operationId: createChecklist
      tags:
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: Checklist to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChecklist'
      responses:
        '201':
          description: Checklist Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a set of checklists.
      operationId: deleteSetChecklist
      tags:
      - Checklists
      security:
      - BearerAuth: []
      requestBody:
        description: id's of checklists to be deleted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChecklistDeleteSet
      responses:
        '204':
          description: Checklists deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}:
    get:
      summary: Fetches a checklist.
      operationId: viewChecklist
      tags:
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checklist Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a checklist.
      operationId: updateChecklist
      tags:
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Checklist to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChecklist'
      responses:
        '204':
          description: Checklist updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a checklist.
      operationId: deleteChecklist
      tags:
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Checklist deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/approvers:
    get:
      summary: Fetches a list of users that is allowed to approve an audit.
      operationId: viewAuditApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: adds a list of users to the list of approvers.
      operationId: addMultipleApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Checklist to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovers'
      responses:
        '200':
          description: users added to list of approvers
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Removes multiple users from approvers.
      operationId: removeApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Approvers removed
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/approvers/{userId}:
    patch:
      summary: adds a user to the list of approvers.
      operationId: addMultipleApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: ID of the user to add.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: user added to list of approvers
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Removes user from approvers.
      operationId: removeApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: ID of the user to remove.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Approvers removed
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/approvers/group/{groupId}:
    patch:
      summary: adds a group of users.
      operationId: addGroupApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group to add.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: groups user added to list of approvers
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Removes groupfrom approvers.
      operationId: removeGroupApprovers
      tags:
      - audit
      - auditApprove
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group to remove.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Approvers removed
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/grants:
    get:
      summary: Lists a checklist's access grants.
      operationId: indexChecklistAccessGrants
      tags:
      - Checklists
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Access Grant List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new access grant.
      operationId: createChecklistAccessGrant
      tags:
      - Checklists
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Access grant to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessGrant'
      responses:
        '201':
          description: Access Grant Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/entries:
    get:
      summary: Lists a checklist's entries.
      operationId: indexChecklistEntries
      tags:
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checklist Entry List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistEntryListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklist/{checklistId}/checkpoints:
    get:
      summary: Lists a checklist's checkpoints.
      operationId: indexChecklistCheckpoints
      tags:
      - Checklists
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checkpoint List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new checkpoint.
      operationId: createChecklistCheckpoint
      tags:
      - Checklists
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Checkpoint to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckpoint'
      responses:
        '201':
          description: Checkpoint Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/sections:
    get:
      summary: Lists a checklist's sections.
      operationId: indexSection
      tags:
      - Sections
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Section List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new section.
      operationId: createSection
      tags:
      - Sections
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Section to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSection'
      responses:
        '201':
          description: Section Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/extensions:
    get:
      summary: Lists a checklist's extensions.
      operationId: indexChecklistExtensions
      tags:
      - Extensions
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Extension List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new extension.
      operationId: createChecklistExtension
      tags:
      - Extensions
      - Checklists
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Extension to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExtension'
      responses:
        '201':
          description: Extension Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checklists/{checklistId}/scoringschemes:
    get:
      summary: Lists a checklist's scoring schemes.
      operationId: indexScoringSchemes
      tags:
      - Checklists
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Scoring Scheme List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringSchemeListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new scoring scheme.
      operationId: createScoringScheme
      tags:
      - Checklists
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: checklistId
        in: path
        description: ID of the checklist.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Scoring scheme to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScoringScheme'
      responses:
        '201':
          description: Scoring Scheme Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringSchemeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extensions/{extensionId}:
    get:
      summary: Lists a checklist's extensions.
      operationId: indexChecklistExtensions
      tags:
      - Extensions
      security:
      - BearerAuth: []
      parameters:
      - name: extensionId
        in: path
        description: ID of the extension.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Extension Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a Extension.
      operationId: updateExtension
      tags:
      - Extensions
      security:
      - BearerAuth: []
      parameters:
      - name: extensionId
        in: path
        description: ID of the extension.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Extension to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExtension'
      responses:
        '204':
          description: Scoring scheme updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Extension.
      operationId: deleteExtension
      tags:
      - Extensions
      security:
      - BearerAuth: []
      parameters:
      - name: extensionId
        in: path
        description: ID of the extension.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Extension deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scoringschemes/{schemeId}:
    get:
      summary: Fetches a scoring scheme.
      operationId: viewScoringScheme
      tags:
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the scoring scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Scoring Scheme Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringSchemeResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a scoring scheme.
      operationId: updateScoringScheme
      tags:
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the scoring scheme.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Scoring scheme to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScoringScheme'
      responses:
        '204':
          description: Scoring scheme updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a scoring scheme.
      operationId: deleteScoringScheme
      tags:
      - Scoring Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the scoring scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Scoring scheme deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scoringschemes/{schemeId}/scores:
    get:
      summary: Lists a scoring schemes's scores.
      operationId: indexScoringScheme
      tags:
      - Scoring Schemes
      - Scores
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the scoring scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Score List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new scors.
      operationId: createScore
      tags:
      - Scoring Schemes
      - Scores
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the scoring scheme.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Score to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScore'
      responses:
        '201':
          description: Score Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scores/{scoreId}:
    get:
      summary: Fetches a score.
      operationId: viewScore
      tags:
      - Scores
      security:
      - BearerAuth: []
      parameters:
      - name: scoreId
        in: path
        description: ID of the score.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Score Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a score.
      operationId: updateScore
      tags:
      - Scores
      security:
      - BearerAuth: []
      parameters:
      - name: scoreId
        in: path
        description: ID of the score.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Score scheme to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScore'
      responses:
        '204':
          description: Score updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a score.
      operationId: deleteScore
      tags:
      - Scores
      security:
      - BearerAuth: []
      parameters:
      - name: scoreId
        in: path
        description: ID of the score.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Score deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scores/{scoreId}/notice:
    post:
      summary: adds user or group to notice.
      operationId: noticeScore
      tags:
      - Scores
      security:
      - BearerAuth: []
      requestBody:
        description: Score scheme to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScoreNotification'
      responses:
        '201':
          description: created
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scores/{scoreNotificationId}/notice:
    delete:
      summary: deletes score notification.
      operationId: deletesScoreNotifications
      tags:
      - Scores
      security:
      - BearerAuth: []
      responses:
        '204':
          description: deleted
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scores/{scoreId}/notice/{checklistId}:
    get:
      summary: lists score notifications to a given score and checklist.
      operationId: listScoreNotifications
      tags:
      - Scores
      security:
      - BearerAuth: []
      responses:
        '204':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreNotificationListResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /grants/{grantId}:
    get:
      summary: Fetches an access grant.
      operationId: viewAccessGrant
      tags:
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: grantId
        in: path
        description: ID of the access grant.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Acces Grant Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGrantResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates an access grant.
      operationId: updateAccessGrant
      tags:
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: grantId
        in: path
        description: ID of the access grant.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Acccess Grant to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessGrant'
      responses:
        '204':
          description: Access Grant updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes an access grant.
      operationId: deleteAccessGrant
      tags:
      - Access Grants
      security:
      - BearerAuth: []
      parameters:
      - name: grantId
        in: path
        description: ID of the access grant.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Access Grant deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sections/{sectionId}:
    get:
      summary: Fetches a section.
      operationId: viewSection
      tags:
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Section Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a section.
      operationId: updateSection
      tags:
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Section to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSection'
      responses:
        '204':
          description: Section updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a section.
      operationId: deleteSection
      tags:
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Section deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sections/{sectionId}/entries:
    get:
      summary: Lists a section's entries.
      operationId: indexSectionEntries
      tags:
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checklist Entry List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistEntryListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sections/{sectionId}/checkpoints:
    get:
      summary: Lists a section's checkpoints.
      operationId: indexSectionCheckpoint
      tags:
      - Sections
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checkpoint List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new checkpoint.
      operationId: createSectionCheckpoint
      tags:
      - Sections
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Checkpoint to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckpoint'
      responses:
        '201':
          description: Checkpoint Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sections/{sectionId}/extensions:
    get:
      summary: Lists a section's extensions.
      operationId: indexSectionExtensions
      tags:
      - Extensions
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Extension List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new extension.
      operationId: createSectionExtension
      tags:
      - Extensions
      - Sections
      security:
      - BearerAuth: []
      parameters:
      - name: sectionId
        in: path
        description: ID of the section.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Extension to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExtension'
      responses:
        '201':
          description: Extension Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checkpoints/{checkpointId}:
    get:
      summary: Fetches a checkpoint.
      operationId: viewCheckpoint
      tags:
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checkpoint Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a checkpoint.
      operationId: updateCheckpoint
      tags:
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Section to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCheckpoint'
      responses:
        '204':
          description: Checkpoint updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a checkpoint.
      operationId: deleteCheckpoint
      tags:
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Checkpoint deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checkpoints/{checkpointId}/entries:
    get:
      summary: Lists a checkpoint's entries.
      operationId: indexCheckpointEntries
      tags:
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Checklist Entry List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistEntryListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checkpoints/{checkpointId}/extensions:
    get:
      summary: Lists a checkpoint's extensions.
      operationId: indexCheckpointExtensions
      tags:
      - Extensions
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Extension List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new extension.
      operationId: createCheckpointExtension
      tags:
      - Extensions
      - Checkpoints
      security:
      - BearerAuth: []
      parameters:
      - name: checkpointId
        in: path
        description: ID of the checkpoint.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Extension to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExtension'
      responses:
        '201':
          description: Extension Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /choiceschemes/{schemeId}:
    get:
      summary: Fetches a choice scheme.
      operationId: viewChoiceScheme
      tags:
      - Choice Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the choice scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Choice Scheme Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoiceSchemeResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a choice scheme.
      operationId: updateChoiceScheme
      tags:
      - Choice Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the choice scheme.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Choice Scheme to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChoiceScheme'
      responses:
        '204':
          description: Choice Scheme updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /valueschemes/{schemeId}:
    get:
      summary: Fetches a value scheme.
      operationId: viewValueScheme
      tags:
      - Value Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the value scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Value Scheme Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueSchemeResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a value scheme.
      operationId: updateValueScheme
      tags:
      - Value Schemes
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the value scheme.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Value Scheme to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateValueScheme'
      responses:
        '204':
          description: Value Scheme updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /valueschemes/{schemeId}/conditions:
    get:
      summary: Lists a value scheme's score conditions.
      operationId: indexConditions
      tags:
      - Value Schemes
      - Score Conditions
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the value scheme.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Score Condition List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreConditionListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new score condition.
      operationId: createScoreCondition
      tags:
      - Value Schemes
      - Score Conditions
      security:
      - BearerAuth: []
      parameters:
      - name: schemeId
        in: path
        description: ID of the value scheme.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Score Condition to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreCondition'
      responses:
        '201':
          description: Score Condition Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreConditionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /conditions/{conditonId}:
    get:
      summary: Fetches a score condition.
      operationId: viewScoreCondition
      tags:
      - Score Conditions
      security:
      - BearerAuth: []
      parameters:
      - name: conditonId
        in: path
        description: ID of the score condition.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Score Condition Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreConditionResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a score condition.
      operationId: updateScoreCondition
      tags:
      - Score Conditions
      security:
      - BearerAuth: []
      parameters:
      - name: conditonId
        in: path
        description: ID of the score condition.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Score condition to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScoreCondition'
      responses:
        '204':
          description: Score condition updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a score condition.
      operationId: deleteScoreCondition
      tags:
      - Score Conditions
      security:
      - BearerAuth: []
      parameters:
      - name: conditionId
        in: path
        description: ID of the score conditon.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Score condition deleted
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications:
    get:
      summary: Get notifications
      operationId: indexNotifications
      tags:
      - Notifications
      responses:
        '201':
          description: Notification Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new notification.
      operationId: createNotification
      tags:
      - Notifications
      requestBody:
        description: Notification to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotification'
      responses:
        '201':
          description: Notification Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications/read/{notificationId}:
    patch:
      summary: Marks a notification as read
      operationId: readNotification
      tags:
      - Notifications
      requestBody:
        description: Notification to update. You simply can update it if you pass the noficiation id. The api will authorize the user and set the column 'read' to '1' if successful.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNotification'
      responses:
        '201':
          description: Notification Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /media:
    get:
      summary: receive a valid image with the right header, e.g. image/png or image/jpeg
      operationId: indexMedia
      tags:
      - Media
      parameters:
      - name: name
        in: path
        description: The name of the file
        required: true
        schema:
          type: string
          format: uuid
      - name: output_b64
        in: path
        description: if set, image will be returned as base64 string instead of image
        schema:
          type: string
      responses:
        '201':
          description: Media Response
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/Media'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/Media'
        '404':
          description: Media not valid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new media by base64. The PHP function http://php.net/manual/de/function.finfo-open.php must be available!
      operationId: createMedia
      tags:
      - Media
      parameters:
      - name: source_b64
        in: path
        description: The base64 encoded data for the image
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Media Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /hardreset/{companyId}:
    get:
    summary: Performes a hard reset for a company
    operationId: hardreset
    tags:
    - HardReset
    responses:
      '204':
        description: company was hard reseted
      default:
        description: Unexpected Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  /users/invitations:
    post:
      summary: Creates a user invitation.
      operationId: createTask
      tags:
      - User Invitation
      requestBody:
        description: email to invite.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInvitation'
      responses:
        '201':
          description: UserInvitation Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/invitations/{token}:
    get:
      summary: Fetches a userinvitation.
      operationId: viewUserInvitation
      tags:
      - UserInvitation
      security:
      - BearerAuth: []
      parameters:
      - name: token
        in: path
        description: invitation token.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User Invitation Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a task.
      operationId: updateTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      requestBody:
        description: Task to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
      parameters:
      - name: taskId
        in: path
        description: ID of task to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Task updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a Task.
      operationId: deleteTask
      tags:
      - Tasks
      security:
      - BearerAuth: []
      parameters:
      - name: taskId
        in: path
        description: ID of task to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Task deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/invitations/company/{companyId}:
    get:
      summary: Lists user invitations of a company.
      operationId: indexUserInvitation
      tags:
      - UserInvitation
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User Invitation List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /invitation/{token}:
    get:
      summary: Lists user invitation for a given token in unauthorized area.
      operationId: provideInvitationData
      tags:
      - Invitation
      responses:
        '200':
          description: User InvitationResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new user.
      operationId: acceptUserInvitation
      tags:
      - Invitation
      requestBody:
        description: User to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits:
    post:
      summary: Creates a new audit.
      operationId: createAudit
      tags:
      - Audit
      requestBody:
        description: Audit to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAudit'
      responses:
        '201':
          description: Audit Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/{auditId}:
    get:
      summary: Fetches a audit.
      operationId: viewAudit
      tags:
      - Audits
      security:
      - BearerAuth: []
      parameters:
      - name: auditId
        in: path
        description: ID of audit to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Audit Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a audit.
      operationId: updateAudit
      tags:
      - Audits
      security:
      - BearerAuth: []
      requestBody:
        description: audit to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAudit'
      parameters:
      - name: auditId
        in: path
        description: ID of audit to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Audit updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a audit.
      operationId: deleteAudit
      tags:
      - Audits
      security:
      - BearerAuth: []
      parameters:
      - name: auditId
        in: path
        description: ID of audit to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Audit deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/company/{companyId}:
    get:
      summary: Lists audits of a company.
      operationId: indexAudit
      tags:
      - Audits
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: state
        description: filter by state
        in: query
        schema:
          type: string
          format: uuid
      - name: user
        description: filter by user
        in: query
        schema:
          type: string
          format: uuid
      - name: checklist
        description: filter by checklist
        in: query
        schema:
          type: string
          format: uuid
      - name: location
        description: filter by location
        in: query
        schema:
          type: string
          format: uuid
      - name: start
        description: start date for filter by time period
        in: query
        schema:
          type: string
          format: date
      - name: end
        description: end date for filter by time period
        in: query
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Audit List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/archive/company/{companyId}:
    get:
      summary: Lists audits of a company for a super admin.
      operationId: indexAudit
      tags:
      - Audits
      security:
      - BearerAuth: []
      parameters:
      - name: auditId
        description: selected audit
        in: path
        schema:
          type: string
          format: uuid
      - name: state
        description: filter by state
        in: query
        schema:
          type: string
          format: uuid
      - name: user
        description: filter by user
        in: query
        schema:
          type: string
          format: uuid
      - name: start
        description: start date for filter by time period
        in: query
        schema:
          type: string
          format: date
      - name: end
        description: end date for filter by time period
        in: query
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Audit List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payment/create:
    post:
      summary: creates credit card or SEPA payment in registration. If you want credit card payment, you need to pass 'token', otherwise the method will set the payment method
      operationId: createPayment
      tags:
      - payment
      parameters:
      - name: token
        description: the token from stripe.js - required if you want to use credit card payment, has the highest priority
        in: query
        schema:
          type: string
      - name: iban
        description: the IBAN - required if you want to use SEPA payment
        in: query
        schema:
          type: string
      - name: package
        description: the package name - BASIC_MONTHLY, BASIC_YEARLY, DELUXE_BASIC, DELUXE_YEARLY, PREMIUM_MONTHLY, PREMIUM_YEARLY
        in: query
        schema:
          type: string
      - name: method
        description: must be set when token is not set. sets the payment method - sepa, invoice
        in: uqery
        schema:
          type: string
      - name: qty
        description: the qty of the subscriptions, at least 1, required
        in: query
        schema:
          type: string
      - name: reference
        description: the order reference
        in: query
        schema:
          type: string
      responses:
        '201':
          description: Payment was created successfully, empty response
          content: ''
        '400':
          description: Payment could not be created, empty response
          content: ''
  /audits/archive:
    patch:
      summary: Archives a set of audits.
      operationId: archiveAuditSets
      tags:
      - Audits
      - Archive
      security:
      - BearerAuth: []
      requestBody:
        description: audits to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveAuditSet'
      responses:
        '204':
          description: Audits archived
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/archive/{archiveId}:
    patch:
      summary: Archives a audit.
      operationId: archiveAudit
      tags:
      - Audits
      - Archive
      security:
      - BearerAuth: []
      requestBody:
        description: audit to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveAudit'
      parameters:
      - name: auditId
        in: path
        description: ID of audit to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Audit archived
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/restore:
    patch:
      summary: restores an set of archived audits.
      operationId: restoreAuditSets
      tags:
      - Audits
      - Archive
      - Restore
      security:
      - BearerAuth: []
      requestBody:
        description: audits to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveAuditSet'
      responses:
        '204':
          description: Audits restored
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/restore/{archiveId}:
    patch:
      summary: restores a audit.
      operationId: restoreAudit
      tags:
      - Audits
      - Archive
      - Restore
      security:
      - BearerAuth: []
      requestBody:
        description: audit to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveAudit'
      parameters:
      - name: auditId
        in: path
        description: ID of audit to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Audit restored
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/states/company/{companyId}:
    get:
      summary: Lists audit states of company.
      operationId: indexAuditStates
      tags:
      - AuditStates
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: page
        description: defines viewed page of pagination
        in: query
        schema:
          type: integer
      - name: numberItems
        description: defines number of viewed items per page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Audit state List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditStateListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/checks/{checkId}:
    get:
      summary: Fetches a check.
      operationId: viewCheck
      tags:
      - Checks
      security:
      - BearerAuth: []
      parameters:
      - name: checkId
        in: path
        description: ID of check to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Check Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a check.
      operationId: updateCheck
      tags:
      - Checks
      security:
      - BearerAuth: []
      requestBody:
        description: Check to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCheck'
      parameters:
      - name: checkId
        in: path
        description: ID of check to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Check updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a check.
      operationId: deleteCheck
      tags:
      - Check
      security:
      - BearerAuth: []
      parameters:
      - name: checkId
        in: path
        description: ID of check to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Check deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/start/{auditId}:
  get:
    summary: Returns first level of started audit and starts audit
    operationId: startAudit
    tags:
    - Audits
    parameters:
    - name: auditId
      description: the audit to be started
      in: path
      schema:
        type: string
        format: uuid
    responses:
      '200':
        description: response ok
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditListResponse'
  /audits/entries/{auditId}:
    get:
      summary: Returns first level or level of selected section
      operationId: startAudit
      tags:
      - Audits
      parameters:
      - name: auditId
        description: the audit to be started
        in: path
        schema:
          type: string
          format: uuid
      - name: sectionId
        desrription: the section to be shown, nothing for root level
        in: request
        scheme:
          type: string
          format: uuid
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
  /audits/plans:
    post:
      summary: Creates a new inspection plan.
      operationId: createInspectionPlan
      tags:
      - Inspection Plans
      requestBody:
        description: Plan to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInspectionPlan'
      responses:
        '201':
          description: Plan Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectionPlanResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/plans/{planId}:
    get:
      summary: Fetches a Inspection Plan.
      operationId: viewInspectionPlan
      tags:
      - Inspection Plans
      security:
      - BearerAuth: []
      parameters:
      - name: planId
        in: path
        description: ID of inspection plan to retrieve.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Inspection Plan Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectionPlanResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a plan.
      operationId: updateInpsectionPlan
      tags:
      - Inspection Plans
      security:
      - BearerAuth: []
      requestBody:
        description: Plan to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInspectionPlan'
      parameters:
      - name: planId
        in: path
        description: ID of plan to update.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: plan updated
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a plan.
      operationId: deleteInspectionPlan
      tags:
      - Inspection Plans
      security:
      - BearerAuth: []
      parameters:
      - name: planId
        in: path
        description: ID of plan to delete.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Plans deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/plans/company/{companyId}:
    get:
      summary: Lists plans of a company.
      operationId: indexInspectionPlan
      tags:
      - Inspection Plans
      security:
      - BearerAuth: []
      parameters:
      - name: companyId
        description: selected company
        in: path
        schema:
          type: string
          format: uuid
      - name: checklist
        description: filter by checklist
        in: query
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Inspection Plan List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectionPlanListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/directory/{entryId}:
    get:
      summary: Lists executed audits of directory (takes DirectoryEntryId).
      operationId: indexExecutedAudits
      tags:
      - Audits
      - Directories
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        description: selected directory entry
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Audit List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /audits/directory/{entryId}/results:
    get:
      summary: Lists results of executed audits of directory (takes DirectoryEntryId).
      operationId: indexExecutedAuditsResults
      tags:
      - Audits
      - Directories
      - Checks
      security:
      - BearerAuth: []
      parameters:
      - name: entryId
        description: selected directory entry
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Check List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckListResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dashboard:
    get:
      summary: Returns the dashboard data
      operationId: getDasboard
      tags:
      - Dashboard
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
  /dashboard/tasks:
    get:
      summary: Returns paginated tasks objects
      operationId: getDashboardPaginatedTasksObjects
      tags:
      - Dashboard
      parameters:
      - name: page
        description: the page to be loaded
        in: query
        schema:
          type: number
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardTasksResponse'
  /dashboard/last_audits:
    get:
      summary: Returns paginated last audits objects
      operationId: getDashboardPaginatedLastAuditsObjects
      tags:
      - Dashboard
      parameters:
      - name: page
        description: the page to be loaded
        in: query
        schema:
          type: number
      - name: start
        description: start date
        in: query
        schema:
          type: date
      - name: end
        description: end date
        in: query
        schema:
          type: date
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardLastAuditsResponse'
  /dashboard/next_audits:
    get:
      summary: Returns paginated next audits objects
      operationId: getDashboardPaginatedNextAuditsObjects
      tags:
      - Dashboard
      parameters:
      - name: page
        description: the page to be loaded
        in: query
        schema:
          type: number
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardNextAuditsResponse'
  /analytics:
    get:
      summary: Returns the analytics for a directory or a specific checklist
      operationId: getAnalytics
      tags:
      - Analytics
      parameters:
      - name: directory
        description: the id of the directory, has a higher priority than checklist
        in: query
        schema:
          type: string
      - name: checklist
        description: the checklist id, has a lower priority than directory
        in: query
        schema:
          type: string
      - name: start
        description: the start date
        in: query
        schema:
          type: date
      - name: end
        description: the end date
        in: query
        schema:
          type: date
      - name: location
        description: the location which shall be filtered for. including all children locations
        in: query
        schema:
          type: string
      responses:
        '200':
          description: response ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ArchiveAuditSet:
      data:
        items:
          type: array
          item: uuid
    ChecklistDeleteSet:
      data:
        checklists:
          type: array
          item: uuid
    DirectoriesDeleteSet:
      data:
        directories:
          type: array
          item: uuid
    BrandedLoginResponse:
      properties:
        data:
          id:
            type: string
          ci:
            type: string
            format: uuid
    CreateBrandedLogin:
      required:
      - id
      - company
      properties:
        id:
          type: string
        company:
          $ref: '#/components/schemas/CreateCompany'
    UpdateBrandedLogin:
      required:
      - id
      properties:
        id:
          type: string
    User:
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        companyId:
          type: string
          format: uuid
        roleId:
          type: string
          enum:
          - user
          - admin
          - superadmin
        gender:
          type: string
          enum:
          - male
          - female
        locale:
          type: string
          enum:
          - en
          - de
          - fr
        timezone:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        image:
          type: string
        current_package:
          type: string
    CreateUser:
      required:
      - email
      - password
      - gender
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
          - male
          - female
        locale:
          type: string
          enum:
          - en
          - de
          - fr
        timezone:
          type: string
        company:
          $ref: '#/components/schemas/CreateCompany'
        phone:
          $ref: '#/components/schemas/CreateWorkPhone'
        source_b64:
          type: string
    UpdateUser:
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
        email:
          type: string
          format: email
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum:
          - user
          - admin
        gender:
          type: string
          enum:
          - male
          - female
        locale:
          type: string
          enum:
          - en
          - de
          - fr
        timezone:
          type: string
        source_b64:
          type: string
    UserResponse:
      properties:
        data:
          $ref: '#/components/schemas/User'
    UserListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    SetResetPasswordToken:
      properties:
        email:
          type: string
          format: email
    ResetPassword:
      properties:
        token:
          type: string
          format: uuid
        password:
          type: string
    VerifyEmail:
      properties:
        token:
          type: string
          format: uuid
    Phone:
      properties:
        id:
          type: string
          format: uuid
        countryCode:
          type: string
          pattern: ^\d+$
        nationalNumber:
          type: string
          pattern: ^\d+$
        type:
          type: string
          enum:
          - home
          - mobile
          - work
          - other
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreatePhone:
      required:
      - type
      - nationalNumber
      - type
      properties:
        countryCode:
          type: string
          pattern: ^\d+$
        nationalNumber:
          type: string
          pattern: ^\d+$
        type:
          type: string
          enum:
          - home
          - mobile
          - work
          - other
    CreateWorkPhone:
      required:
      - type
      - nationalNumber
      properties:
        countryCode:
          type: string
          pattern: ^\d+$
        nationalNumber:
          type: string
          pattern: ^\d+$
    UpdatePhone:
      properties:
        countryCode:
          type: string
          pattern: ^\d+$
        nationalNumber:
          type: string
          pattern: ^\d+$
        type:
          type: string
          enum:
          - home
          - mobile
          - work
          - other
    PhoneResponse:
      properties:
        data:
          $ref: '#/components/schemas/Phone'
    PhoneListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
    Company:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        sector:
          type: string
          enum:
          - building
          - food
          - health
          - transport
          - industry
          - cleaning
          - catering
        subscription:
          type: string
          format: uuid
        reportSettingsId:
          type: string
          format: uuid
        directoryId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateCompany:
      required:
      - name
      properties:
        name:
          type: string
        sector:
          type: string
          enum:
          - building
          - food
          - health
          - transport
          - industry
          - cleaning
          - catering
    UpdateCompany:
      properties:
        name:
          type: string
        sector:
          type: string
          enum:
          - building
          - food
          - health
          - transport
          - industry
          - cleaning
          - catering
    CompanyResponse:
      properties:
        data:
          $ref: '#/components/schemas/Company'
    CompanyListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Company'
    Address:
      properties:
        type:
          type: string
          enum:
          - postal
          - billing
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateAddress:
      required:
      - type
      - country
      properties:
        type:
          type: string
          enum:
          - postal
          - billing
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
    UpdateAddress:
      properties:
        type:
          type: string
          enum:
          - postal
          - billing
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
    AddressResponse:
      properties:
        data:
          $ref: '#/components/schemas/Address'
    AddressListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    Subscription:
      properties:
        id:
          type: string
          format: uuid
        viewUser:
          type: boolean
        updateUser:
          type: boolean
        deleteUser:
          type: boolean
        viewCompany:
          type: boolean
        updateCompany:
          type: boolean
        deleteCompany:
          type: boolean
        viewSubscription:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    UpdateSubscription:
      properties:
        id:
          type: string
          format: uuid
        viewUser:
          type: boolean
        updateUser:
          type: boolean
        deleteUser:
          type: boolean
        viewCompany:
          type: boolean
        updateCompany:
          type: boolean
        deleteCompany:
          type: boolean
        viewSubscription:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    SubscriptionResponse:
      properties:
        data:
          $ref: '#/components/schemas/Subscription'
    ReportSettings:
      properties:
        id:
          type: string
          format: uuid
        showCompanyName:
          type: boolean
        showCompanyAddress:
          type: boolean
        showUsername:
          type: boolean
        showPageNumbers:
          type: boolean
        showExportDate:
          type: boolean
        showVersion:
          type: boolean
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    UpdateReportSettings:
      properties:
        id:
          type: string
          format: uuid
        showCompanyName:
          type: boolean
        showCompanyAddress:
          type: boolean
        showUsername:
          type: boolean
        showPageNumbers:
          type: boolean
        showExportDate:
          type: boolean
        showVersion:
          type: boolean
        text:
          type: string
    ReportSettingsResponse:
      properties:
        data:
          $ref: '#/components/schemas/ReportSettings'
    Group:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateGroup:
      required:
      - name
      properties:
        name:
          type: string
        source_b64:
          type: string
    UpdateGroup:
      properties:
        name:
          type: string
        source_b64:
          type: string
    GroupResponse:
      properties:
        data:
          $ref: '#/components/schemas/Group'
    GroupListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Audit:
      required:
      - company
      - user
      - checklist
      - executionDue
      properties:
        id:
          type: string
          format: uuid
        executionDue:
          type: string
          format: date-time
        checklist:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateAudit:
      required:
      - company
      - user
      - checklist
      - executionDue
      properties:
        id:
          type: string
          format: uuid
        executionDue:
          type: string
          format: date-time
        checklist:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    UpdateAudit:
      required:
      - company
      - user
      - checklist
      - executionDue
      properties:
        id:
          type: string
          format: uuid
        executionDue:
          type: string
          format: date-time
        checklist:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    AuditResponse:
      properties:
        data:
          $ref: '#/components/schemas/Audit'
    AuditListResponse:
      properties:
        data:
          type: array
          items:
            checks:
              type: array
              items:
                $ref: '#/components/schemas/Check'
            sections:
              type: array
              items:
                $ref: '#/components/schemas/ChecklistEntry'
    Task:
      required:
      - name
      - description
      - assignee
      - issuer
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        giveNotice:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        assignedAt:
          type: string
          format: date-time
        doneAt:
          type: string
          format: date-time
        assignee:
          type: string
          format: uuid
        issuer:
          type: string
          format: uuid
        location:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        status:
          type: string
          format: uuid
        type:
          type: string
          format: uuid
        priority:
          type: string
          format: uuid
        image:
          type: string
    CreateTask:
      required:
      - name
      - description
      - assignee
      - issuer
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        giveNotice:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        assignedAt:
          type: string
          format: date-time
        doneAt:
          type: string
          format: date-time
        assignee:
          type: string
          format: uuid
        issuer:
          type: string
          format: uuid
        location:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        status:
          type: string
          format: uuid
        type:
          type: string
          format: uuid
        priority:
          type: string
          format: uuid
        source_b64:
          type: string
    UpdateTask:
      required:
      - name
      - description
      - assignee
      - issuer
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        giveNotice:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        assignedAt:
          type: string
          format: date-time
        doneAt:
          type: string
          format: date-time
        assignee:
          type: string
          format: uuid
        issuer:
          type: string
          format: uuid
        location:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        status:
          type: string
          format: uuid
        type:
          type: string
          format: uuid
        priority:
          type: string
          format: uuid
        source_b64:
          type: string
    TaskResponse:
      properties:
        data:
          $ref: '#/components/schemas/Task'
    TaskListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    TaskState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateTaskState:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateTaskState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    TaskStateResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskState'
    TaskType:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateTaskType:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateTaskType:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    TaskTypeResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskType'
    TaskTypeListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskType'
    TaskPriority:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateTaskPriority:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateTaskPriority:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    TaskPriorityResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskPriority'
    TaskPriorityListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskPriority'
    Location:
      required:
      - name
      - description
      - state
      - type
      - company
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        street:
          type: string
        streetNumber:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        type:
          type: string
        state:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateLocation:
      required:
      - name
      - type
      - company
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        type:
          type: string
        state:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    UpdateLocation:
      required:
      - name
      - type
      - company
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        type:
          type: string
        state:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    LocationResponse:
      properties:
        data:
          $ref: '#/components/schemas/Location'
    LocationListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    LocationState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateLocationState:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateLocationState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    LocationStateResponse:
      properties:
        data:
          $ref: '#/components/schemas/LocationState'
    LocationStateListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationState'
    LocationType:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateLocationType:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateLocationType:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    LocationTypeResponse:
      properties:
        data:
          $ref: '#/components/schemas/LocationType'
    LocationTypeListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationType'
    Directory:
      properties:
        id:
          type: string
          format: uuid
        path:
          type: array
          items:
            $ref: '#/components/schemas/PathComponent'
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    PathComponent:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    CreateDirectory:
      required:
      - name
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
    UpdateDirectory:
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
    DirectoryResponse:
      properties:
        data:
          $ref: '#/components/schemas/Directory'
    MoveDirectory:
      properties:
        objectType:
          type: string
        targetId:
          type: string
          format: uuid
    MoveDirectories:
      properties:
        entries:
          type: array
          items:
            type: array
            items:
              objectId:
                type: string
                format: uuid
              objectType:
                type: string
              targetId:
                type: string
                format: uuid
    ArchiveDirectory:
      properties:
        company:
          type: string
          format: uuid
    ArchiveDirectories:
      properties:
        company:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: string
            format: uuid
    DirectoryListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Directory'
    DirectoryEntry:
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        objectType:
          type: string
          enum:
          - directory
          - checklist
        object:
          type: object
          # TODO(thertweck): When oneOf becomes available, add refs here.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    DirectoryEntryListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DirectoryEntry'
    Checklist:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        needsApproval:
          type: boolean
        chooseRandom:
          type: boolean
        numberQuestions:
          type: integer
        approvers:
          type: array
          items:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/Group'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateChecklist:
      required:
      - name
      - numberQuestions
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        numberQuestions:
          type: integer
        needsApproval:
          type: boolean
        approvers:
          type: array
          items:
            objectId:
              type: string
              format: uuid
            objectType:
              type: string
    UpdateChecklist:
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        needsApproval:
          type: boolean
        approvers:
          type: array
          items:
            objectId:
              type: string
              format: uuid
            objectType:
              type: string
    ChecklistResponse:
      properties:
        data:
          $ref: '#/components/schemas/Checklist'
    ChecklistEntry:
      properties:
        id:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        objectType:
          type: string
          enum:
          - directory
          - checklist
        object:
          type: object
          # TODO(thertweck): When oneOf becomes available, add refs here.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    ChecklistEntryListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChecklistEntry'
    Section:
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateSection:
      required:
      - title
      properties:
        title:
          type: string
    UpdateSection:
      properties:
        name:
          type: string
    SectionResponse:
      properties:
        data:
          $ref: '#/components/schemas/Section'
    SectionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Section'
    ScoringScheme:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        isListed:
          type: boolean
        scopeId:
          type: string
          format: uuid
        scopeType:
          type: string
          enum:
          - company
          - checklist
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateScoringScheme:
      required:
      - name
      properties:
        name:
          type: string
        isListed:
          type: boolean
    UpdateScoringScheme:
      properties:
        name:
          type: string
        isListed:
          type: boolean
    ScoringSchemeResponse:
      properties:
        data:
          $ref: '#/components/schemas/ScoringScheme'
    ScoringSchemeListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScoringScheme'
    Score:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: number
        color:
          type: string
        schemeId:
          type: string
          format: uuid
        noticed:
          type: array
          items:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/Group'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateScore:
      required:
      - name
      - value
      - color
      properties:
        name:
          type: string
        value:
          type: number
        color:
          type: string
    UpdateScore:
      properties:
        name:
          type: string
        value:
          type: number
        color:
          type: string
    ScoreNotification:
      properties:
        data:
          id:
            type: string
            format: uuid
          sectionId:
            type: string
            format: uuid
          objectId:
            type: string
            format: uuid
          objectType:
            type: string
          checklistId:
            type: string
            format: uuid
          object:
            type: object
    CreateScoreNotification:
      properties:
        data:
          objectId:
            type: string
            format: uuid
          objectType:
            type: string
          checklistId:
            type: string
            format: uuid
    ScoreNotificationListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScoreNotification'
    ScoreResponse:
      properties:
        data:
          $ref: '#/components/schemas/Score'
    ScoreListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScoreResponse'
    AccessGrant:
      properties:
        id:
          type: string
          format: uuid
        subjectId:
          type: string
          format: uuid
        subjectType:
          type: string
          enum:
          - user
          - group
        objectId:
          type: string
          format: uuid
        objectType:
          type: string
          enum:
          - directory
        objectName:
          type: string
        view:
          type: boolean
        index:
          type: boolean
        update:
          type: boolean
        delete:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateAccessGrant:
      required:
      - subjectId
      - view
      - index
      - update
      - delete
      properties:
        subjectId:
          type: string
          format: uuid
        view:
          type: boolean
        index:
          type: boolean
        update:
          type: boolean
        delete:
          type: boolean
    UpdateAccessGrant:
      properties:
        view:
          type: boolean
        index:
          type: boolean
        update:
          type: boolean
        delete:
          type: boolean
    AccessGrantResponse:
      properties:
        data:
          $ref: '#/components/schemas/AccessGrant'
    AccessGrantListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccessGrant'
    Checkpoint:
      properties:
        id:
          type: string
          format: uuid
        prompt:
          type: string
        scoringSchemeId:
          type: string
          format: uuid
        mandatory:
          type: boolean
        factor:
          type: number
        index:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateCheckpoint:
      required:
      - prompt
      - index
      properties:
        prompt:
          type: string
        scoringSchemeId:
          type: string
          format: uuid
        mandatory:
          type: boolean
        factor:
          type: number
        index:
          type: string
        evaluationScheme:
          $ref: '#/components/schemas/CreateEvaluationScheme'
    UpdateCheckpoint:
      properties:
        prompt:
          type: string
        scoringSchemeId:
          type: string
          format: uuid
        mandatory:
          type: boolean
        factor:
          type: number
        index:
          type: string
    CheckpointResponse:
      properties:
        data:
          $ref: '#/components/schemas/Checkpoint'
    CheckpointListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Checkpoint'
    CreateEvaluationScheme:
      required:
      - type
      - data
      properties:
        type:
          type: string
          enum:
          - value
          - choice
        data:
          $ref: '#/components/schemas/CreateValueScheme'
    ChoiceScheme:
      properties:
        id:
          type: string
          format: uuid
        multiselect:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateChoiceScheme:
      required:
      - multiselect
      properties:
        multiselect:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/CreateScoreCondition'
    UpdateChoiceScheme:
      properties:
        multiselect:
          type: boolean
    ChoiceSchemeResponse:
      properties:
        data:
          $ref: '#/components/schemas/ChoiceScheme'
    ChoiceSchemeListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChoiceScheme'
    ValueScheme:
      properties:
        id:
          type: string
          format: uuid
        unit:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateValueScheme:
      required:
      - unit
      - scoreConditions
      properties:
        unit:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/CreateScoreCondition'
    UpdateValueScheme:
      properties:
        unit:
          type: string
    ValueSchemeResponse:
      properties:
        data:
          $ref: '#/components/schemas/ValueScheme'
    ValueSchemeListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ValueScheme'
    ScoreCondition:
      properties:
        id:
          type: string
          format: uuid
        to:
          type: number
        from:
          type: number
        scoreId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateScoreCondition:
      required:
      - scoreId
      properties:
        to:
          type: number
        from:
          type: number
        scoreId:
          type: string
          format: uuid
    UpdateScoreCondition:
      properties:
        to:
          type: number
        from:
          type: number
        scoreId:
          type: string
          format: uuid
    ScoreConditionResponse:
      properties:
        data:
          $ref: '#/components/schemas/ScoreCondition'
    ScoreConditionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScoreCondition'
    NotificationPreferencesResponse:
      id:
        type: string
        format: uuid
      userID:
        type: string
        format: uuid
      checklistNeedsActivityNotification:
        type: boolean
      checklistCompletedNotification:
        type: boolean
      checklistDueNotification:
        type: boolean
      checklistAssignedNotification:
        type: boolean
      checklistCriticalRatingNotification:
        type: boolean
      taskCompletedNotification:
        type: boolean
      taskAssignedNotification:
        type: boolean
      taskUpdatedNotification:
        type: boolean
      taskDeletedNotification:
        type: boolean
      checklistNeedsActivityMail:
        type: boolean
      checklistCompletedMail:
        type: boolean
      checklistDueMail:
        type: boolean
      checklistAssignedMail:
        type: boolean
      checklistCriticalRatingMail:
        type: boolean
      taskCompletedMail:
        type: boolean
      taskAssignedMail:
        type: boolean
      taskUpdatedMail:
        type: boolean
      taskDeletedMail:
        type: boolean
    UpdateNotificationPreferences:
      checklistNeedsActivityNotification:
        type: boolean
      checklistCompletedNotification:
        type: boolean
      checklistDueNotification:
        type: boolean
      checklistAssignedNotification:
        type: boolean
      checklistCriticalRatingNotification:
        type: boolean
      taskCompletedNotification:
        type: boolean
      taskAssignedNotification:
        type: boolean
      taskUpdatedNotification:
        type: boolean
      taskDeletedNotification:
        type: boolean
      checklistNeedsActivityMail:
        type: boolean
      checklistCompletedMail:
        type: boolean
      checklistDueMail:
        type: boolean
      checklistAssignedMail:
        type: boolean
      checklistCriticalRatingMail:
        type: boolean
      taskCompletedMail:
        type: boolean
      taskAssignedMail:
        type: boolean
      taskUpdatedMail:
        type: boolean
      taskDeletedMail:
        type: boolean
    Extension:
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
          - textfield
          - location
          - participant
        object:
          type: object
          # TODO(thertweck): When oneOf becomes available, add refs here.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    CreateExtension:
      properties:
        type:
          type: string
          enum:
          - textfield
          - location
          - participant
        index:
          type: string
        data:
          type: array
    UpdateExtension:
      properties:
        type:
          type: string
          enum:
          - textfield
          - location
          - participant
        index:
          type: string
        data:
          type: array
    ExtensionResponse:
      properties:
        data:
          $ref: '#/components/schemas/Extension'
    ExtensionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Extension'
    Notification:
      required:
      - user_id
      - sender_id
      - link
      - message
      - read
      - pushed
      - readAt
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        link:
          type: string
        message:
          type: string
        read:
          type: int
        pushed:
          type: int
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
    CreateNotification:
      required:
      - user_id
      - sender_id
      - link
      - message
      - read
      - pushed
      - readAt
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        link:
          type: string
        message:
          type: string
        read:
          type: int
        pushed:
          type: int
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
    ReadNotification:
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    NotificationResponse:
      properties:
        data:
          $ref: '#/components/schemas/Notification'
    Media:
      required:
      - name
      properties:
        name:
          type: string
          format: uuid
        link:
          type: string
    CreateMedia:
      required:
      - name
      - source_b64
      - extension
      properties:
        name:
          type: string
          format: uuid
        source_b64:
          type: string
        extension:
          type: string
    CorporateIdentity:
      properties:
        id:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        brand_primary:
          type: string
        brand_secondary:
          type: string
        link_color:
          type: string
        image:
          type: string
    CreateCorporateIdentity:
      required:
      - company
      properties:
        id:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        brand_primary:
          type: string
        brand_secondary:
          type: string
        link_color:
          type: string
        source_b64:
          type: string
    UpdateCorporateIdentity:
      properties:
        id:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
        brand_primary:
          type: string
        brand_secondary:
          type: string
        link_color:
          type: string
        source_b64:
          type: string
    CorporateIdentityResponse:
      properties:
        data:
          $ref: '#/components/schemas/CorporateIdentity'
    CompanySubscriptionResponse:
      properties:
        package:
          type: string
        start:
          type: date
        end:
          type: date
    UserInvitation:
      required:
      - email
      - company
      properties:
        email:
          type: string
          format: email
        company:
          type: string
          format: uuid
    CreateUserInvitation:
      required:
      - email
      - company
      properties:
        email:
          type: string
          format: email
        company:
          type: string
          format: uuid
    UpdateUserInvitation:
      required:
      - email
      properties:
        email:
          type: string
          format: email
    UserInvitationResponse:
      properties:
        data:
          $ref: '#/components/schemas/UserInvitation'
    UserInvitationListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInvitation'
    UpdateApprovers:
      properties:
        approvers:
          type: array
          items:
            uuid: userId
    AuditState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    CreateAuditState:
      required:
      - name
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    UpdateAuditState:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          type: string
          format: uuid
        deletedAt:
          type: string
          format: date-time
    AuditStateResponse:
      properties:
        data:
          $ref: '#/components/schemas/AuditState'
    AuditStateListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditState'
    Check:
      properties:
        id:
          type: string
          format: uuid
        audit:
          type: string
          format: uuid
        checklist:
          type: string
          format: uuid
        checkpoint:
          type: string
          format: uuid
        section:
          type: string
          format: uuid
        valueScheme:
          type: string
          format: uuid
        scoringScheme:
          type: string
          format: uuid
        rating:
          type: float
        objectType:
          type: string
        objectId:
          type: string
          format: uuid
        object:
          type: object
        base64:
          type: string
        index:
          type: string
    UpdateCheck:
      properties:
        id:
          type: string
          format: uuid
        audit:
          type: string
          format: uuid
        checklist:
          type: string
          format: uuid
        checkpoint:
          type: string
          format: uuid
        section:
          type: string
          format: uuid
        valueScheme:
          type: string
          format: uuid
        scoringScheme:
          type: string
          format: uuid
        rating:
          type: float
        objectType:
          type: string
        objectId:
          type: string
          format: uuid
        object:
          type: object
    CheckResponse:
      properties:
        data:
          $ref: '#/components/schemas/Check'
    CheckListResponse:
      $ref: '#/components/schemas/Check'
    Dashboard:
      properties:
        last_audits:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        last_audits_count:
          type: number
        last_audits_total:
          type: number
        last_audits_pages:
          type: number
        next_audits:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        next_audits_count:
          type: number
        next_audits_total:
          type: number
        next_audits_pages:
          type: number
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        tasks_count:
          type: number
        tasks_total:
          type: number
        tasks_pages:
          type: number
    DashboardLastAudits:
      properties:
        last_audits:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        last_audits_count:
          type: number
        last_audits_total:
          type: number
        last_audits_pages:
          type: number
    DashboardNextAudits:
      properties:
        next_audits:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        next_audits_count:
          type: number
        next_audits_total:
          type: number
        next_audits_pages:
          type: number
    DashboardTasks:
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        tasks_count:
          type: number
        tasks_total:
          type: number
        tasks_pages:
          type: number
    DashboardResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
    DashboardTasksResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DashboardTasks'
    DashboardLastAuditsResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DashboardLastAudits'
    DashboardNextAuditsResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DashboardNextAudits'
    InspectionPlan:
      required:
      - name
      - type
      - factor
      - startTime
      - endTime
      - checklist
      - user
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        factor:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        checklist:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
    CreateInspectionPlan:
      required:
      - name
      - type
      - factor
      - startTime
      - endTime
      - checklist
      - user
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        factor:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        checklist:
          type: string
          format: uuid
        type:
          type: string
          enum: [monthly, weekly, daily, hourly]
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
    UpdateInspectionPlan:
      required:
      - name
      - type
      - factor
      - startTime
      - endTime
      - checklist
      - user
      - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        factor:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        checklist:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        company:
          type: string
          format: uuid
    InspectionPlanResponse:
      properties:
        data:
          $ref: '#/components/schemas/Task'
    InspectionPlanListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Id:
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    Error:
      required:
      - message
      properties:
        message:
          type: string
    CreateCCPayment:
      required:
      - token
      - package
      properties:
        token:
          type: string
        package:
          type: string
    CreateSEPAPayment:
      required:
      - method
      - iban
      properties:
        method:
          type: string
        iban:
          type: string
    AnalyticsResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Analytics'
    Analytics:
      properties:
        charts:
          type: object
        audits:
          type: array
          items:
            type: object
        media:
          type: array
          items:
            type: object
