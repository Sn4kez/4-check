<?php

use App\AuditState;
use App\Check;
use App\Checklist;
use App\ChoiceCheck;
use App\Country;
use App\LocationCheck;
use App\LocationState;
use App\LocationType;
use App\ParticipantCheck;
use App\PictureCheck;
use App\TextfieldCheck;
use App\ValueCheck;
use Illuminate\Http\Response;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Ramsey\Uuid\Uuid;

class ExportTest extends TestCase {
    use DatabaseMigrations;

    /**
     * @var Checklist
     */
    private $checklist;
    /**
     * @var Checklist
     */
    private $otherChecklist;
    /**
     * @var \App\Section
     */
    private $section;
    /**
     * @var \App\Checkpoint
     */
    private $checkpoint;
    private $checkpoint;
    /**
     * @var \App\TextfieldExtension
     */
    private $textfieldExtension;
    /**
     * @var \App\Extension
     */
    private $extension;
    /**
     * @var Check
     */
    private $check;
    /**
     * @var \App\Audit
     */
    private $audit;
    /**
     * @var Checklist
     */
    private $fakeChecklist;
    /**
     * @var \App\ValueScheme
     */
    private $valueScheme;
    /**
     * @var \App\ScoringScheme
     */
    private $scoringScheme;
    /**
     * @var \App\ChoiceScheme
     */
    private $evaluationScheme;
    /**
     * @var \App\Checkpoint
     */
    private $textFieldCheckpoint;
    private $fakeScore;

    public function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->checklist = $this->makeFakeChecklist(['with_description']);
        $this->checklist->createdByUser()->associate($this->user);
        $this->checklist->lastUpdatedByUser()->associate($this->user);
        $this->checklist->save();
        $this->company->directory->entry($this->checklist)->save();
        $this->otherChecklist = $this->makeFakeChecklist(['with_description']);
        $this->otherChecklist->save();
        $this->company->directory->entry($this->otherChecklist)->save();
        $this->section = $this->makeFakeSection();
        $this->section->save();
        $this->checklist->entry($this->section)->save();
        $scoringScheme = $this->makeFakeScoringScheme();
        $this->company->scoringSchemes()->save($scoringScheme);
        $score = $this->makeFakeScore();
        $scoringScheme->scores()->save($score);

        $this->fakeScore = $score;
        $this->fakeScore->id = Uuid::uuid4()->toString();
        $this->fakeScore->save();

        $this->evaluationScheme = $this->makeFakeChoiceScheme();
        $this->evaluationScheme->save();

        $this->checkpoint = $this->makeFakeCheckpoint();
        $this->checkpoint->scoringScheme()->associate($scoringScheme);
        $this->checkpoint->evaluationScheme()->associate($this->evaluationScheme);
        $this->checkpoint->save();
        $this->checklist->entry($this->checkpoint)->save();

        $this->textFieldCheckpoint = $this->makeFakeCheckpoint();
        $this->textFieldCheckpoint->scoringScheme()->associate($scoringScheme);
        $this->textFieldCheckpoint->evaluationScheme()->associate($this->evaluationScheme);
        $this->textFieldCheckpoint->save();

        $this->textfieldExtension = $this->makeFakeTextfieldExtension();
        $this->textfieldExtension->save();
        $this->extension = $this->checklist->extension($this->textfieldExtension);
        $this->extension->save();

        $this->checklist->entry($this->extension)->save();

        $this->createFakeAudits();
    }

    private function createFakeAudits() {
        $this->fakeChecklist = $this->checklist;
        $this->fakeChecklist->id = Uuid::uuid4()->toString();
        $this->fakeChecklist->save();

        $this->valueScheme = $this->makeFakeValueScheme();
        $this->valueScheme->save();

        $this->scoringScheme = $this->makeFakeScoringScheme();
        $this->scoringScheme->id = Uuid::uuid4()->toString();
        $score = $this->makeFakeScore();
        $score->scoringSchemeId = $this->scoringScheme->id;
        $this->scoringScheme->scores()->save($score);
        $this->scoringScheme->scope()->associate($this->company);
        $this->scoringScheme->save();

        $subdir2 = $this->makeFakeDirectory();
        $subdir2->name = 'layer 2';
        $subdir2->save();

        $subdir3 = $this->makeFakeDirectory();
        $subdir3->name = 'layer 3';
        $subdir3->save();

        $directoryEntry1 = $this->makeFakeDirectoryEntry();
        $directoryEntry1->objectId = $subdir2->id;
        $directoryEntry1->objectType = "directory";
        $directoryEntry1->id = Uuid::uuid4()->toString();
        $directoryEntry1->parentId = $this->company->id;
        $directoryEntry1->save();

        $directoryEntry2 = $this->makeFakeDirectoryEntry();
        $directoryEntry2->objectId = $subdir3->id;
        $directoryEntry2->objectType = "directory";
        $directoryEntry2->id = Uuid::uuid4()->toString();
        $directoryEntry2->parentId = $directoryEntry1->id;
        $directoryEntry2->save();

        $directoryEntry3 = $this->makeFakeDirectoryEntry();
        $directoryEntry3->objectId = $this->fakeChecklist->id;
        $directoryEntry3->objectType = "checklist";
        $directoryEntry3->id = Uuid::uuid4()->toString();
        $directoryEntry3->parentId = $directoryEntry2->id;
        $directoryEntry3->save();

        #echo $directoryEntry1->id . "\r\n";
        #echo $directoryEntry2->id . "\r\n";
        #echo $directoryEntry3->id . "\r\n";

        $this->company->directory->entry($subdir2)->save();

        $fakeAuditState = $this->makeFakeAuditState();
        $fakeAuditState->company()->associate($this->company);
        $fakeAuditState->save();

        $auditTemplate = $this->makeFakeAudit();
        $auditTemplate->company()->associate($this->company);
        $auditTemplate->checklist()->associate($this->fakeChecklist);
        $auditTemplate->state()->associate(AuditState::where('name', '=', 'draft')->first());
        $auditTemplate->executionAt = date("Y-m-d H:i:s");

        $this->section = $this->makeFakeSection();
        $this->section->save();

        $this->audit = clone $auditTemplate;
        $this->audit->save();

        $this->updateCheck("signature", "234.jpg");

        $this->updateCheck(Check::VALUE_TYPE_TEXTFIELD, "das ist ein test");
        $this->updateCheck(Check::VALUE_TYPE_TEXTFIELD, "das ist noch ein test");
        $this->updateCheck(Check::VALUE_TYPE_TEXTFIELD, "das ist ein test\r\nmit\r\nzeilenumbruch");

        $this->updateCheck(Check::VALUE_TYPE_PICTURE, "123.jpg", Check::OBJECT_TYPE_PICTURE);
        $this->updateCheck(Check::VALUE_TYPE_PICTURE, "234.jpg", Check::OBJECT_TYPE_SIGNATURE);

        $this->updateCheck(Check::VALUE_TYPE_LOCATION);

        $this->updateCheck(Check::VALUE_TYPE_PARTICIPANTS, $this->user->id, "Extern");
        $this->updateCheck(Check::VALUE_TYPE_PARTICIPANTS, $this->user->id, null);

        $this->updateCheck(Check::VALUE_TYPE_VALUE, 1.23);
        $this->updateCheck(Check::VALUE_TYPE_VALUE, 4.56);
        $this->updateCheck(Check::VALUE_TYPE_VALUE, 789);
    }

    private function updateCheck($objectType, $value = "", $value2 = "") {
        $this->check = new Check();
        $this->check->id = Uuid::uuid4()->toString();
        $this->check->auditId = $this->audit->id;
        $this->check->checklistId = $this->fakeChecklist->id;
        $this->check->checkpointId = $this->checkpoint->id;
        $this->check->sectionId = $this->section->id;
        $this->check->valueSchemeId = $this->valueScheme->id;
        $this->check->scoringSchemeId = $this->scoringScheme->id;
        $this->check->objectType = $objectType;
        $this->check->objectId = $this->checkpoint->id;
        $this->check->rating = rand(1, 100);

        $extension = null;

        switch ($objectType) {
            case Check::VALUE_TYPE_TEXTFIELD:
                // Create check
                $valueCheck = new TextfieldCheck();
                $valueCheck->value = $value;
                $valueCheck->checkId = $this->check->id;
                $valueCheck->id = Uuid::uuid4()->toString();
                $valueCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $valueCheck->id;

                break;
            case Check::VALUE_TYPE_LOCATION:
                $location = $this->makeFakeLocation();
                $location->type()->associate(LocationType::where('name', '=', 'building')->first());
                $location->state()->associate(LocationState::where('name', '=', 'active')->first());
                $location->company()->associate($this->company);
                $location->country()->associate(Country::find('de'));
                $location->id = Uuid::uuid4()->toString();
                $location->name = "Testlocation";
                $location->street = "Teststrasse";
                $location->streetNumber = "123";
                $location->city = "Glinde";
                $location->postalCode = "21509";
                $location->save();

                $locationCheck = new LocationCheck();
                $locationCheck->locationId = $location->id;
                $locationCheck->checkId = $this->check->id;
                $locationCheck->id = Uuid::uuid4()->toString();
                $locationCheck->save();

                $this->check->valueId = $locationCheck->id;

                break;

            case Check::VALUE_TYPE_PICTURE:
                // Create check
                $valueCheck = new PictureCheck();
                $valueCheck->value = $value;
                $valueCheck->checkId = $this->check->id;
                $valueCheck->id = Uuid::uuid4()->toString();
                $valueCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $valueCheck->id;

                break;

            case "signature":
                // Create check
                $valueCheck = new PictureCheck();
                $valueCheck->value = $value;
                $valueCheck->checkId = $this->check->id;
                $valueCheck->id = Uuid::uuid4()->toString();
                $valueCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $valueCheck->id;
                $this->check->objectType = "picture";

                break;

            case Check::VALUE_TYPE_VALUE:
                // Create check
                $valueCheck = new ValueCheck();
                $valueCheck->value = $value;
                $valueCheck->checkId = $this->check->id;
                $valueCheck->id = Uuid::uuid4()->toString();
                $valueCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $valueCheck->id;

                break;

            case Check::VALUE_TYPE_CHECKPOINT:
                break;

            case Check::VALUE_TYPE_CHOICE:
                // Create check
                $valueCheck = new ChoiceCheck();
                $valueCheck->scoreId = $this->fakeScore->id;
                $valueCheck->checkId = $this->check->id;
                $valueCheck->id = Uuid::uuid4()->toString();
                $valueCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $valueCheck->id;

                break;

            case Check::VALUE_TYPE_PARTICIPANTS:
                // Create check
                $participantCheck = new ParticipantCheck();
                $participantCheck->participantId = $value;

                if (!is_null($value2)) {
                    $participantCheck->externalParticipant = $value2;
                }

                $participantCheck->checkId = $this->check->id;
                $participantCheck->id = Uuid::uuid4()->toString();
                $participantCheck->save();

                // Assign value of new check to textfield check to common check
                $this->check->valueId = $participantCheck->id;

                break;
        }

        $this->check->save();

        if (!is_null($extension)) {
            $this->section->entry($extension)->save();
        }
    }

    public function provideExport() {
        return [
            [null, null]
        ];
    }

    /**
     * @param $checklistId
     * @param $directoryId
     * @throws Exception
     * @dataProvider provideExport
     */
    public function testExport($checklistId, $directoryId) {
        $this->actingAs($this->admin);
        $this->json('GET', '/audits/export');
        $this->ddLastContent();
        $this->seeStatusCode(Response::HTTP_OK);
        $this->seeHeader('Content-Type', 'application/json');

    }
}
