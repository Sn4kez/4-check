<?php

use Illuminate\Http\Response;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Ramsey\Uuid\Uuid;
use App\Media;

class ViewMeTest extends TestCase
{
    use DatabaseMigrations;

    private $mediaName;
    private $mediaBase64ContentCheckString;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $uploadFeedback = Media::uploadUnitTestTestImage(sprintf("%s/files/logo.jpg", dirname(__FILE__)));
        $this->mediaBase64ContentCheckString = $uploadFeedback["base64Content"];
        $this->mediaName = $uploadFeedback["mediaName"];

        $this->user->company->current_package = 'test';
        $this->user->save();
    }

    public function testInvalidAccess()
    {
        $this->json('GET', '/users/me');
        $this->seeStatusCode(Response::HTTP_UNAUTHORIZED);
        $this->seeHeader('Content-Type', 'application/json');
    }

    public function provideValidAccessData()
    {
        return [
            [self::$USER],
            [self::$ADMIN],
            [self::$SUPER_ADMIN],
        ];
    }

    /**
     * @param $userKey
     * @dataProvider provideValidAccessData
     */
    public function testValidAccess($userKey)
    {
        $user = $this->getUser($userKey);
        $this->actingAs($user);

        $user->image = $this->mediaName;
        $user->save();

        $this->json('GET', '/users/me');
        $this->seeStatusCode(Response::HTTP_OK);
        $this->seeHeader('Content-Type', 'application/json');
        $this->seeJsonStructure([
            'data' => [
                'id',
                'email',
                'firstName',
                'middleName',
                'lastName',
                'locale',
                'gender',
                'timezone',
                'image',
                'current_package'
            ],
        ])->seeJsonNotNull([
            'data' => [
                'id',
                'image'
            ],
        ])->seeJsonContains([
            'email' => $user->email,
            'firstName' => $user->firstName,
            'middleName' => $user->middleName,
            'lastName' => $user->lastName,
            'locale' => $user->locale->id,
            'gender' => $user->gender->id,
            'timezone' => $user->timezone,
            'image' => $this->mediaBase64ContentCheckString
        ]);
    }
}
