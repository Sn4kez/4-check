<?php

use Laravel\Lumen\Testing\DatabaseMigrations;
use App\Dashboard;
use Illuminate\Http\Response;
use App\Task;
use App\TaskType;
use App\TaskPriority;
use App\TaskState;

class PaginateDashboardTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->createFakeAudits();
        $this->createFakeTasks();
    }

    private function createFakeAudits()
    {
        $maxObjects = 16;
        $additionalDays = 0;

        for ($i = 0; $i < $maxObjects; $i++) {
            $audit = $this->makeFakeAudit();
            $audit->company()->associate($this->company);
            $audit->id = \Ramsey\Uuid\Uuid::uuid4()->toString();
            $audit->{Dashboard::COLUMN_NAME_RESPONSIBLE_FOR_DATE_FILTER} = $this->getDateWithAdditionalDays($additionalDays);
            $audit->save();

            $additionalDays += 2;
        }
    }

    private function createFakeTasks()
    {
        $taskTemplate = factory(Task::class)->make();
        $taskTemplate->type()->associate(TaskType::where('name', '=', 'offer')->first());
        $taskTemplate->priority()->associate(TaskPriority::where('name', '=', 'low')->first());
        $taskTemplate->state()->associate(TaskState::where('name', '=', 'todo')->first());
        $taskTemplate->issuer()->associate($this->user);
        $taskTemplate->assignee()->associate($this->user);
        $taskTemplate->company()->associate($this->company);

        $maxTasks = 12;

        for ($i = 0; $i < $maxTasks; $i++) {
            $taskTemplate = factory(Task::class)->make();
            $taskTemplate->type()->associate(TaskType::where('name', '=', 'offer')->first());
            $taskTemplate->priority()->associate(TaskPriority::where('name', '=', 'low')->first());
            $taskTemplate->state()->associate(TaskState::where('name', '=', 'todo')->first());
            $taskTemplate->issuer()->associate($this->user);
            $taskTemplate->assignee()->associate($this->user);
            $taskTemplate->company()->associate($this->company);
            $taskTemplate->save();
        }
    }

    public function provideInvalidAccessData()
    {
        return [
            [null, Response::HTTP_UNAUTHORIZED],
            ['random', Response::HTTP_UNAUTHORIZED],
            ['nonexistent', Response::HTTP_UNAUTHORIZED]
        ];
    }

    /**
     * @param string $userKey
     * @param int $statusCode
     * @dataProvider provideInvalidAccessData
     */
    public function testInvalidAccess($userKey, $statusCode)
    {
        if ($userKey != null) {
            $user = $this->getUser($userKey);

            if ($user !== null) {
                $this->actingAs($user);
            }
        }

        $this->json('GET', 'dashboard/tasks');
        $this->seeStatusCode($statusCode);
        $this->seeHeader('Content-Type', 'application/json');
    }

    public function provideInvalidEntities()
    {
        return [
            [self::$USER, 'invalidtype', Response::HTTP_UNPROCESSABLE_ENTITY]
        ];
    }

    /**
     * @dataProvider provideInvalidEntities
     * @param $userKey
     * @param $objectType
     * @param $awaitedStatusCode
     */
    public function testInvalidEntities($userKey, $objectType, $awaitedStatusCode)
    {
        $user = $this->getUser($userKey);
        $this->actingAs($user);

        $this->json('GET', sprintf('dashboard/%s', $objectType));
        $this->seeStatusCode($awaitedStatusCode);
    }

    public function provideValidEntities()
    {
        $feedback = [];

        $dateToday = $this->getDateWithAdditionalDays(0);
        $dateInTwoDays = $this->getDateWithAdditionalDays(2);
        $dateInFourDays = $this->getDateWithAdditionalDays(4);

        foreach ([self::$USER] as $userKey) {
            /**
             * userkey, object-type, current page, date from, date to,
             * awaited total, awaited count, awaited pages
             */
            $feedback[] = [$userKey, 'tasks', 1, null, null, 12, 5, 3];
            $feedback[] = [$userKey, 'tasks', 3, null, null, 12, 2, 3];

            $feedback[] = [$userKey, 'last_audits', 1, null, null, 16, 5, 4];
            $feedback[] = [$userKey, 'last_audits', 2, null, null, 16, 5, 4];
            $feedback[] = [$userKey, 'last_audits', 4, null, null, 16, 1, 4];

            $feedback[] = [$userKey, 'next_audits', 1, null, null, 16, 5, 4];
            $feedback[] = [$userKey, 'next_audits', 2, null, null, 16, 5, 4];
            $feedback[] = [$userKey, 'next_audits', 4, null, null, 16, 1, 4];

            $feedback[] = [$userKey, 'last_audits', 1, $dateToday, $dateInTwoDays, 2, 2, 1];
            $feedback[] = [$userKey, 'last_audits', 1, $dateToday, $dateInFourDays, 3, 3, 1];
            $feedback[] = [$userKey, 'last_audits', 1, $dateInTwoDays, $dateInFourDays, 2, 2, 1];
        }

        return $feedback;
    }

    /**
     * @param $userKey
     * @param $objectType
     * @param $page
     * @param $dateFrom
     * @param $dateTo
     * @param $awaitedTotal
     * @param $awaitedCount
     * @param $awaitedPages
     * @dataProvider provideValidEntities
     */
    public function testValidEntities($userKey, $objectType, $page, $dateFrom, $dateTo, $awaitedTotal, $awaitedCount, $awaitedPages)
    {
        $user = $this->getUser($userKey);
        $this->actingAs($user);

        $data = array_filter([
            Dashboard::REQUEST_PARAM_NAME_PAGE => $page,
            Dashboard::REQUEST_PARAM_NAME_DATE_FROM => $dateFrom,
            Dashboard::REQUEST_PARAM_NAME_DATE_TO => $dateTo
        ]);

        $this->json('GET', sprintf('dashboard/%s', $objectType), $data);
        $this->seeStatusCode(Response::HTTP_OK);
        $this->seeHeader('Content-Type', 'application/json');

        $awaitedJSONStructure = [
            'data' => [
                $objectType,
                sprintf('%s_total', $objectType),
                sprintf('%s_count', $objectType),
                sprintf('%s_pages', $objectType)
            ]
        ];

        $this->seeJsonStructure($awaitedJSONStructure);
        $this->seeJsonNotNull($awaitedJSONStructure);

        $this->seeJsonContains(['data' => [
            sprintf('%s_total', $objectType) => $awaitedTotal,
            sprintf('%s_count', $objectType) => $awaitedCount,
            sprintf('%s_pages', $objectType) => $awaitedPages
        ]]);
    }

    private function getDateWithAdditionalDays($additionalDays)
    {
        return date("Y-m-d", strtotime(sprintf('+%s days', $additionalDays)));
    }
}
